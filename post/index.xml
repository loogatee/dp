<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JohnnyReedProjects</title>
    <link>/post/</link>
    <description>Recent content in Posts on JohnnyReedProjects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 May 2018 21:52:28 -0700</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proj1</title>
      <link>/post/post_002/proj1/</link>
      <pubDate>Fri, 11 May 2018 21:52:28 -0700</pubDate>
      
      <guid>/post/post_002/proj1/</guid>
      <description>This is just a test not sure what else to put in here This is just a test not sure what else to put in here</description>
    </item>
    
    <item>
      <title>Proj_Ready_For_Pic</title>
      <link>/post/post_001/proj_readyforpic/</link>
      <pubDate>Fri, 11 May 2018 21:52:28 -0700</pubDate>
      
      <guid>/post/post_001/proj_readyforpic/</guid>
      <description>Hello World Random Random Random</description>
    </item>
    
    <item>
      <title>Mongoose OS on ESPer</title>
      <link>/post/post_004/mos/</link>
      <pubDate>Sun, 28 Jan 2018 18:59:43 +0530</pubDate>
      
      <guid>/post/post_004/mos/</guid>
      <description>Recently I&amp;rsquo;ve got my hands on the craved-for IoT ESP32, thanks to DFRobot, and have been tinkering with it ever since. I&amp;rsquo;m really amazed by it since it packs both Bluetooth and WiFi in a small yet powerful unit. Since I received the MCU rather than the module, so, to use it, I made myself a breakout board named ESPer(because, why not? ðŸ˜„). Feel free to check out its Instructions over here.</description>
    </item>
    
    <item>
      <title>Testing &#34;django-netjsonconfig&#34;</title>
      <link>/post/post_003/netjsonconfig/</link>
      <pubDate>Sun, 14 Jan 2018 14:28:40 +0530</pubDate>
      
      <guid>/post/post_003/netjsonconfig/</guid>
      <description>A task came up in Google Code-in which asked me to install the django-netjsonconfig module by OpenWISP. Furthermore, I&amp;rsquo;m also supposed to share the challenges I faced during the set-up process as a sort of feedback. I&amp;rsquo;ll be trying be concise in this post so, without further ado, I&amp;rsquo;m beginning with this post.
Installing &amp;ldquo;django-netjsonconfig&amp;rdquo; The installation instructions for this this module have been well-documented on its GitHub repository. So I began the installation by creating a Python 2.</description>
    </item>
    
    <item>
      <title>Google Code-in with OpenWISP</title>
      <link>/post/post_006/gci/</link>
      <pubDate>Sat, 13 Jan 2018 10:29:23 +0530</pubDate>
      
      <guid>/post/post_006/gci/</guid>
      <description>Recently I&amp;rsquo;ve been participating in Google Code-in which is Google&amp;rsquo;s initiative to introduce young minds to the concept of FOSS, that is Free or Open-Source Softwares. This post is for sharing my experiences with GCI, as the title suggests. So let&amp;rsquo;s just get on it.
It all began while I was returning from an outing on 5 December, 2017 and was searching the internet for Google Science Fair to check if I could participate in it or not.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/post/post_005/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/post_005/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>